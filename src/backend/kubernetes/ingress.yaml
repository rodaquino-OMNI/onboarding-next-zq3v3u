apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: austa-ingress
  namespace: austa
  labels:
    app: austa
    component: ingress
    environment: production
    region: ${REGION}
  annotations:
    # Ingress Controller Configuration
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # SSL/TLS Security Configuration
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "HIGH:!aNULL:!MD5"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    
    # Request Handling Configuration
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-FHIR-Version"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Permissions-Policy: camera=(), microphone=(), geolocation=()";
    
    # WAF Configuration
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecAuditEngine RelevantOnly
      SecAuditLogParts ABDEFHIJZ
      SecRule REQUEST_HEADERS:Content-Type "text/plain" "id:1,deny,status:403,msg:'Plain text content type not allowed'"
    
    # Monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    
    # AWS ALB Configuration
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/healthcheck-path: "/health"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "10"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    
    # GCP Configuration for DR
    cloud.google.com/backend-config: '{"default": "austa-backend-config"}'
    cloud.google.com/neg: '{"ingress": true}'

spec:
  tls:
    - hosts:
        - api.austa.com
      secretName: austa-tls-cert
  rules:
    - host: api.austa.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: austa-backend
                port:
                  name: http